{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Table of contents**<a id='toc0_'></a>    \n",
                "- [201 What is algorithmic analysis](#toc1_)\n",
                "  - [1. Compare algorithms or programs?] (#toc1_1_)\n",
                "  - [2. What are computing resources?] (#toc1_2_)\n",
                "- [202 Big O representation] (#toc2_)\n",
                "  - [1. Algorithmic time metrics] (#toc2_1_)\n",
                "  - [2. Number of times assignment statements are counted [emphasis added]] (#toc2_2_)\n",
                "  - [3. Problem size affects algorithm execution time] (#toc2_3_)\n",
                "  - [4. Other factors affecting the running time of the algorithm] (#toc2_4_)\n",
                "  - [5. Determine execution time order of magnitude function from code analysis] (#toc2_5_)\n",
                "  - [6. Other algorithmic complexity representations] (#toc2_6_)\n",
                "- [203 Comparison of algorithms for determining \"anagrams\" (above)](#toc3_)\n",
                "  - [1. Algorithm 1 -- Verbatim checking] (#toc3_1_)\n",
                "  - [2. Algorithm 2 -- Sort Comparison] (#toc3_2_)\n",
                "- [204 Comparison of algorithms for determining \"anagrams\" (below)](#toc4_)\n",
                "  - [3. Algorithm 3 - violent method] (#toc4_1_)\n",
                "  - [4. Algorithm 4 - Counting Comparisons] (#toc4_2_)\n",
                "- [205 Performance of Python Data Types (top)](#toc5_)\n",
                "  - [1. LIST list data types] (#toc5_1_)\n",
                "  - [2. Performance of common operations on LIST lists] (#toc5_2_)\n",
                "- [206 Performance of Python Data Types (below)](#toc6_)\n",
                "  - [1. dict data type] (#toc6_1_)\n",
                "  - [Timing comparison of in operations on lists and dicts](#toc6_2_)\n",
                "- [207 How to do a catechism OJ](#toc7_)\n",
                "- [OJ Actual](#toc8_)\n",
                "- [Supplementary material ---- fast power algorithms](#toc9_)\n",
                "\n",
                "<!-- vscode-jupyter-toc-config\n",
                "\tnumbering=false\n",
                "\tanchor=true\n",
                "\tflat=false\n",
                "\tminLevel=1\n",
                "\tmaxLevel=6\n",
                "\t/vscode-jupyter-toc-config -->\n",
                "<!-- THIS CELL WILL BE REPLACED ON TOC UPDATE. DO NOT WRITE YOUR TEXT IN THIS CELL -->"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "[Course Ideas]\n",
                "\n",
                "This week's course learns how to evaluate algorithms:\n",
                "1. Thinking about what to compare: algorithms or programs; and what the evaluation metrics should be [201]\n",
                "2. Propose the Big O representation and learn how to calculate the indicator [202]\n",
                "3. Presentation of specific cases (anagram algorithms) and analysis [203, 204]\n",
                "4. analyze the complexity of python's built-in data type operations [205, 206]\n",
                "5. Options for the use of OJ [207]\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# <a id='toc1_'></a>[201 What is algorithmic analysis](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc1_1_'></a> [1. Compare algorithms or programs?] (#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "* :: Algorithms are step-by-step descriptions of problem solving, at the logical level\n",
                "\n",
                "* :: Programs, on the other hand, are algorithms implemented in a programming language and are physical in nature.\n",
                "\n",
                "$\\implies$ the same algorithm can produce many programs through different programmers using different programming languages\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Combined with the demonstration of cumulative summation on the PPT, this yields\n",
                "\n",
                "❖ There are many factors that contribute to the \"goodness\" of a program, such as code style, readability, and so on.\n",
                "\n",
                "❖ whereas we are mainly interested in **characterizing the algorithm itself**\n",
                "\n",
                "❖ Algorithm analysis is mainly about judging and comparing algorithms from the perspective of computational resource consumption\n",
                "\n",
                "$\\implies$ algorithms that utilize computational resources more efficiently, or take up less computational resources, are good algorithms\n",
                "\n",
                "TIPS: The programming language Python adopts forced indentation, the advantage of which lies in the functional and visual unity of the statement block. Some free-form programming languages, even if the programmer follows the programming style, may cause a mismatch between the format of the code and its actual function.\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc1_2_'></a> [2. What are computing resources?] (#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "❖ one is the storage space or memory required by the algorithm during problem solving\n",
                "\n",
                ":: **But **storage space is affected by changes in the size of the problem's own data**\n",
                "\n",
                "* :: It is not easy to distinguish which storage space is needed for the description of the problem itself and which is taken up by the algorithms\n",
                "  \n",
                "❖ Another is the execution time of the algorithm\n",
                "\n",
                "* :: We can perform actual runtime testing of a program to obtain a realistic runtime. This is often done using\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "$\\implies$** That's measuring execution time, is it**?"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "❖ Refer to the following example"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "import time\n",
                "help(time.time)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "import time \n",
                "#Iterative Cumulative Method\n",
                "def sumOfN2(n):\n",
                "    start = time.time()#开始计时\n",
                "    theSum = 0\n",
                "    for i in range(1,n+1):\n",
                "        theSum += i\n",
                "    end = time.time()\n",
                "    return theSum, end - start\n",
                "\n",
                "for i in range(5):\n",
                "    print(\"Sum is %d required %10.7f seconds\" %sumOfN2(100000))\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "import time\n",
                "# Iterationless cumulative method\n",
                "def sumOfN3(n):\n",
                "    start = time.time()\n",
                "    theSum = (n*(1+n))/2\n",
                "    end = time.time()\n",
                "    return theSum,end - start\n",
                "\n",
                "for i in range(5):\n",
                "    print(\"Sum is %d required %10.7f seconds\" %sumOfN3(100000))"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The new algorithm runtime is almost independent of the number to be accumulated. However, the actual detection of runtime comparison algorithms is a bit of a misnomer, as it is also related to the programming language and runtime environment. For example\n",
                "\n",
                "❖ The same algorithm, implemented in a different programming language or run on a different machine, can yield very different runtimes:\n",
                "\n",
                "  For example, running a non-iterative algorithm on an old machine may even be slower than an iterative algorithm on a new machine.\n",
                "\n",
                "❖ We need better ways to measure algorithmic runtime, and this metric is independent of specific machines, programs, and runtimes\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "This indicator is the Big O representation in the next section"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# <a id='toc2_'></a>[202 Big O representation](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc2_1_'></a>[1. Algorithmic time metrics](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Evaluation of an algorithm needs to evaluate the computational resources occupied during its operation. Computational resources include space and time. The main measure is the occupied time resource."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "❖ The number of operations or steps performed by an algorithm can be used as a metric independent of the specific program/machine.\n",
                "\n",
                "Then:\n",
                "\n",
                "Which operation is independent of the specific implementation of the algorithm?\n",
                "\n",
                "So:\n",
                "\n",
                "A common basic operation is needed as a unit of measure for running steps"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "==>\n",
                "**Use of assignment statements**"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc2_2_'></a>[2. Assignment statement counts number of times [emphasis]](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Why use assignment statements for metrics?\n",
                "\n",
                "* :: An assignment statement contains both the basic resources of (expression) computation and (variable) storage.\n",
                "\n",
                "* :: A closer look at the programming language features shows that, in addition to definitional statements that are not related to computational resources, there are three main types of control flow statements and assignment statements\n",
                "\n",
                "* :: Whereas control flow statements (sequential, decision and loops) are merely organizing statements and do not perform processing in themselves."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The processing done by computers is generally two major functions, computation and storage. Only assignment statements contain these two resources"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc2_3_'></a> [3. Problem size affects algorithm execution time](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The goal of algorithm analysis is to find out:** how problem size** will affect the execution time of an algorithm\n",
                "\n",
                "See classroom PPT for examples\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "❖ Problem size is the main factor affecting the execution time of the algorithm\n",
                "\n",
                "❖ The exact value of the basic operational quantity function T(n) is not particularly important; what is important is the dominant part of T(n) that is the decisive factor\n",
                "\n",
                "❖ with a dynamic perspective: as the size of the problem increases, some parts of T(n) overshadow the contribution of others\n",
                "\n",
                "The order-of-magnitude function describes the dominant part of T(n) that increases most rapidly as n increases, and is called the \"Big O\" representation, denoted O(f(n)), where f(n) denotes the dominant part of T(n).\n",
                "\n",
                "It's not a bad idea to assume that n is very large and just find the largest term associated with n\n",
                "\n",
                "Order of Magnitude function: Order of Magnitude\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Case: Methodology for determining the order of magnitude of running time greater than 0"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Example: T(n)=5n2+27n+1005\n",
                "\n",
                "* :: The determining role of the constant 1005 when n is small\n",
                "\n",
                "* :: But as n gets larger, the n^2 term becomes more and more important, and the other two terms have less and less impact on the outcome\n",
                "\n",
                "* :: Similarly, the coefficient 5 in the n^2 term has little effect on the growth rate of n^2\n",
                "\n",
                "* :: So it is possible to remove 27n+1005 from the order of magnitude, as well as the fraction of factor 5, determined as O(n^2)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc2_4_'></a>[4. Other factors affecting algorithm runtime](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "❖ Sometimes it's not just the size of the problem that determines runtime\n",
                "\n",
                "❖ Certain specific data can also affect algorithm runtime\n",
                "\n",
                "* :: The best, worst and average conditions. Where the average condition reflects the mainstream performance of the algorithm\n",
                "\n",
                "* **Analysis of algorithms looking at the mainstream (average case)** and not getting caught up in a few specific running conditions\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The following figure shows common big-O order of magnitude functions with names"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "<img src=\"./img/1.png\">"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc2_5_'></a>[5. Determine execution time order of magnitude function from code analysis](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Refer to the corresponding case lectures in class and note that only the highest order term $n^2$ is retained, removing all coefficients"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc2_6_'></a> [6. Other algorithmic complexity representations](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "* :: Big-O representation: the smallest of all ceilings\n",
                "* :: Omega$\\Omega$ representation: the largest of all lower bounds\n",
                "* :: Large $\\Theta$ representation: if the upper and lower limits are the same\n",
                "\n",
                "Big O representation is the focus"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "<img src=\"./img/2.png\">"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The following two sections explain and compare the complexity of each algorithm using \"Determining Whether a Word is an Anagram\"."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# <a id='toc3_'></a>[203 Comparison of algorithms for determining \"anagrams\" (above)](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The term \"anagram\" refers to the rearranging of letters between two words, such as heart and earth.\n",
                "\n",
                "To write a bool function that takes these two words as arguments and returns whether or not these two words are anagrams\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "With this problem, it is possible to show different orders of magnitude of algorithms\n",
                "\n",
                "$\\implies$ is that there are different solutions to the same problem, and can be compared to determine which solution is better"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc3_1_'></a> [1. Algorithm 1 - Verbatim Checking](#toc0_)\n",
                "* :: Check the letters in word 1 one by one into word 2 to see if they exist, if they exist, then tick (tick: set the corresponding character of word 2 to None, to avoid using it again next time; and because str is an immutable type in python, copy the string 2 into the list, so that it is easy to change it to None)\n",
                "* Every character can be found, yes\n",
                "* :: Cannot be found, no\n",
                "\n",
                "\n",
                "\n",
                "There's a detail in there that the letters of word 1 may all be in word 2, but not all of word 2 may be in word 1. However, further reading of the question stem reveals that the question asks:\n",
                "* :: Assuming that the two words involved in the judgment consist of lowercase letters only\n",
                "* :: And of equal length\n",
                "\n",
                "Therefore the test cases need to be eligible, the code is not correct in all cases\n",
                "\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Add an example of while to determine if you will enter a loop or not\n",
                "#he while loop only executes when its condition is True\n",
                "#If you want to run a loop when the condition is False, you need to use while not condition\n",
                "\n",
                "while False: # not True = False, = can also be assumed to be while 1 > 2.\n",
                "    print(\"This will never print\")\n",
                "\n",
                "while not True:  # not True = False\n",
                "    print(\"This will never print,too\")\n",
                "\n",
                "\n",
                "# This WILL enter the loop\n",
                "while True:  # True = True\n",
                "    print(\"This will print\")\n",
                "    break"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Addendum: For /debug in vscode, see this [documentation] (. /debug_example.py)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Remember to save the file before re-running the code\n",
                "def anagramSolution1(s1,s2):# The complexity of this algorithm is O(n^2)\n",
                "    alist = list(s2)#copy to list\n",
                "    pos1 = 0\n",
                "    stillOK = True\n",
                "    while pos1 < len(s1) and stillOK:# loop through each character in s1\n",
                "        pos2 = 0\n",
                "        found = False\n",
                "        while pos2 < len(alist) and not found:# put every character in s1 into s2 for comparison\n",
                "            if s1[pos1] == alist[pos2]:#comparison successful\n",
                "                found = True\n",
                "            else:# Next if the comparison fails\n",
                "                pos2 += 1\n",
                "        if found:# tick if found\n",
                "            alist[pos2] = None\n",
                "        else:\n",
                "            stillOK = False#Not found, not an anagram.\n",
                "            #break# can be used or not\n",
                "        pos1 += 1#If the current one is not found, but will go back one step, and meet the while loop again, resulting in the exit while\n",
                "    return stillOK\n",
                "print(anagramSolution1('abcd','dceb'))"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc3_2_'></a> [2. Algorithm 2 - Sort Comparison](#toc0_)\n",
                "* :: Sort both strings alphabetically\n",
                "* :: Compare them character by character, and if they are the same, they are anagrams.\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "collapsed": true
            },
            "outputs": [],
            "source": [
                "def anagramSolution2(s1,s2):# the complexity of this algorithm depends on the sorting algorithm\n",
                "    alist1 = list(s1)#all to list\n",
                "    alist2 = list(s2)#convert all to list\n",
                "\n",
                "    alist1.sort()#sort separately\n",
                "    alist2.sort()#sort separately\n",
                "    pos = 0\n",
                "    matches = True\n",
                "    while pos < len(s1) and matches:\n",
                "        if alist1[pos] == alist2[pos]:#compare one by one\n",
                "            pos += 1\n",
                "        else:\n",
                "            matches = False\n",
                "    return matches\n",
                "\n",
                "print(anagramSolution2('abcde','acdbe'))"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "In this algorithm, the order of magnitude of the loop is O(n). But sorting is the dominant step in the time of this algorithm. Therefore, the order of magnitude of the running time of this algorithm is equal to the order of magnitude of the sorting process O(nlog n)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# <a id='toc4_'></a>[204 Comparison of algorithms for determining \"anagrams\" (below)](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc4_1_'></a> [3. Algorithm 3 - Violent Method](#toc0_)\n",
                "* :: Align all the characters in s1\n",
                "* :: Look again to see if s2 appears in the fully-ranked list of s1\n",
                "* :: The complexity is $O(n!)$"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc4_2_'></a> [4. Algorithm 4 - Count Comparison](#toc0_)\n",
                "* :: Compare the number of occurrences of each letter in two strings\n",
                "* If the same, it's an anagram"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "collapsed": true
            },
            "outputs": [],
            "source": [
                "def anagramSolution3(s1,s2):\n",
                "    c1 = [0]*26\n",
                "    c2 = [0]*26\n",
                "    for i in range(len(s1)):\n",
                "        pos = ord(s1[i]) - ord('a')#ord function returns the unicode encoding of the character, mapping a to z by subtracting the encoding of a; of course a dictionary can also be used\n",
                "    for i in range(len(s2)):\n",
                "        pos = ord(s2[i]) - ord('a')\n",
                "        c2[pos] += 1\n",
                "    j = 0\n",
                "    stillOK = True\n",
                "    while j < 26 and stillOK:\n",
                "        if c1[j] == c2[j]:\n",
                "            j += 1\n",
                "        else:\n",
                "            stillOK = False\n",
                "    return stillOK\n",
                "print(anagramSolution3('abc','dca'))"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "#Use the dictionary\n",
                "def anagramSolution_dict(s1, s2):\n",
                "    # Create empty dictionaries\n",
                "    dic1 = {}\n",
                "    dic2 = {}\n",
                "\n",
                "    for i in s1:\n",
                "        dic1[i] = dic1.get(i,0) + 1# set default to 0\n",
                "    \n",
                "    for i in s2:\n",
                "        dic2[i] = dic2.get(i,0) + 1\n",
                "    \n",
                "    return dic1 == dic2\n",
                "\n",
                "print(anagramSolution_dict('abc','dca'))\n",
                "#T(n) = n+n+26"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The total number of operations is T(n) = 2n + 26, which is of order O(n)\n",
                "\n",
                "**The price paid is that more memory space is needed**. More storage space will also be needed when considering words composed of large character sets."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# <a id='toc5_'></a>[205 Performance of Python data types (above)](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "to discuss the big-O order of magnitude of various operations on Python's two built-in data types:\n",
                "\n",
                "* :: List list\n",
                "* :: Dictionary dict\n",
                "\n",
                "All are container types and all are mutable. Dictionaries are unordered.\n",
                "\n",
                "Estimating the order of magnitude of the runtime of its various operations through operational tests, rather than looking at source code analysis"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "<img src=\"./img/3.png\">"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Note that dict does not have a reverse lookup operation"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc5_1_'></a>[1. LIST list datatype](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "The general idea is to make the most commonly used operations perform best at the expense of less commonly used operations\n",
                "\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc5_2_'></a>[2. LIST list common operation performance](#toc0_)\n",
                "* :: Most commonly used are indexed values and assignments: complexity is O(1) due to the random access feature, independent of the size of the list itself\n",
                "* Second is list growth: lst.append(v) is O(1) and lst = lst + [v], which is O(n+k), related to the length of both lists. Note that the latter involves copying a new list and then pasting in the extension"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {
                "collapsed": true
            },
            "outputs": [],
            "source": [
                "# Below are 4 ways to generate lists, sorted from fastest to slowest\n",
                "def test1():\n",
                "    l1 = list(range(1000))#fastest\n",
                "\n",
                "def test2():\n",
                "    l2 = [i for i in range(1000)]#列表推导式\n",
                "\n",
                "def test3():\n",
                "    l3 = []\n",
                "    for i in range(1000):\n",
                "        l3.append(i)\n",
                "\n",
                "def test4():\n",
                "    l4 = []#slowest\n",
                "    for i in range(1000):\n",
                "        l4 += [i] "
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "collapsed": true
            },
            "outputs": [],
            "source": [
                "from timeit import Timer\n",
                "t1 = Timer(\"test1()\",\"from __main__ import test1\")#类和实例\n",
                "print (\"list range %f seconds\\n\" % t1.timeit(number = 1000))#range调用\n",
                "# Timer(\"test1()\",\"from __main__ import test1\")\n",
                "# test1() is the iterative statement that gives timer as a string\n",
                "# The second parameter is the install statement, which is run only once. What recurring variables appear inside the statement that is run repeatedly can be imported in from the install statement\n",
                "# test1 is the main program name. It is to be imported in the main program namespace, so there will be from __main__ import test1\n",
                "# __main__ is the main program namespace\n",
                "t2 = Timer(\"test2()\",\"from __main__ import test2\")\n",
                "print (\"comprehension %f seconds\\n\" % t2.timeit(number = 1000))#列表推导式\n",
                "\n",
                "t3 = Timer(\"test3()\",\"from __main__ import test3\")\n",
                "print (\"append %f seconds\\n\" % t3.timeit(number = 1000))#append\n",
                "\n",
                "t4 = Timer(\"test4()\",\"from __main__ import test4\")\n",
                "print (\"concat %f seconds\\n\" % t4.timeit(number = 1000))#循环连接列表\n",
                "\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "<img src=\"./img/4.png\">"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "\n",
                "* The ```list.pop(i)`` operation, which removes an element from the center by shifting forward and copying all the elements behind the removed element, seems a bit clunky [on average, it's O(n/2), which is O(n) orders of magnitude]\n",
                "* :: This implementation ensures that **list-indexed fetch and assignment** operations are fast, up to O(1)\n",
                " \n",
                "$\\implies$ counts as a compromise between commonly used and infrequently used operations.\n",
                "\n",
                "Perform the following timing test"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {},
            "outputs": [],
            "source": [
                "\n",
                "import timeit\n",
                "popzero = timeit.Timer(\"x.pop(0)\",\"from __main__ import x\")#弹出首位\n",
                "popend = timeit.Timer(\"x.pop()\",\"from __main__ import x\")#弹出末位"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# For the same list\n",
                "x = list(range(2000000))\n",
                "print(popzero.timeit(number= 1000))\n",
                "print(\"*************************\")\n",
                "x = list(range(2000000))\n",
                "print(popend.timeit(number= 1000))"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "pop(0) pop()\n",
                        "        1.49075,         0.00006\n",
                        "        2.87480,         0.00005\n",
                        "        4.29529,         0.00006\n",
                        "        5.71040,         0.00006\n",
                        "        7.18768,         0.00005\n",
                        "        8.41984,         0.00005\n",
                        "        9.82090,         0.00005\n",
                        "       12.46059,         0.00005\n",
                        "       18.86371,         0.00015\n",
                        "       16.66502,         0.00008\n",
                        "       17.84160,         0.00009\n",
                        "       20.46787,         0.00006\n",
                        "       20.52624,         0.00006\n",
                        "       25.90026,         0.00006\n",
                        "       25.50882,         0.00005\n",
                        "       26.52436,         0.00008\n",
                        "       28.06565,         0.00005\n",
                        "       27.86764,         0.00007\n",
                        "       26.94766,         0.00006\n",
                        "       28.41532,         0.00005\n",
                        "       31.36111,         0.00005\n",
                        "       35.76016,         0.00007\n",
                        "       38.05410,         0.00005\n",
                        "       38.59099,         0.00005\n",
                        "       39.71761,         0.00006\n",
                        "       35.71222,         0.00006\n",
                        "       37.10646,         0.00006\n",
                        "       38.36970,         0.00006\n",
                        "       42.30253,         0.00006\n",
                        "       42.07530,         0.00005\n",
                        "       39.50946,         0.00005\n",
                        "       40.97921,         0.00013\n",
                        "       42.01515,         0.00006\n",
                        "       43.72506,         0.00006\n",
                        "       45.32599,         0.00006\n",
                        "       45.83546,         0.00006\n",
                        "       47.10346,         0.00006\n",
                        "       48.43127,         0.00022\n",
                        "       49.82803,         0.00006\n",
                        "       53.85374,         0.00005\n",
                        "       53.35329,         0.00014\n",
                        "       54.60961,         0.00005\n",
                        "       54.59769,         0.00008\n",
                        "       56.06312,         0.00006\n",
                        "       57.33798,         0.00006\n",
                        "       58.96386,         0.00005\n",
                        "       61.19100,         0.00005\n",
                        "       62.41009,         0.00005\n",
                        "       64.08765,         0.00005\n",
                        "       65.10326,         0.00007\n",
                        "       66.40503,         0.00007\n",
                        "       68.52925,         0.00005\n",
                        "       69.02455,         0.00005\n",
                        "       62.21594,         0.00005\n",
                        "       61.41559,         0.00005\n",
                        "       62.79904,         0.00005\n",
                        "       63.87856,         0.00005\n",
                        "       64.83839,         0.00005\n",
                        "       65.98883,         0.00005\n",
                        "       67.16677,         0.00027\n",
                        "       68.38339,         0.00006\n",
                        "       69.36576,         0.00005\n",
                        "       70.19995,         0.00006\n",
                        "       71.61972,         0.00008\n",
                        "       72.65389,         0.00005\n",
                        "       74.20786,         0.00005\n",
                        "       88.61163,         0.00006\n",
                        "       89.62819,         0.00011\n",
                        "       90.43440,         0.00005\n",
                        "       91.86605,         0.00006\n",
                        "       93.18136,         0.00005\n",
                        "       94.98768,         0.00005\n",
                        "       91.84499,         0.00005\n",
                        "       98.34318,         0.00005\n",
                        "      100.19912,         0.00007\n",
                        "      100.24325,         0.00008\n",
                        "      102.85080,         0.00005\n",
                        "      103.05859,         0.00009\n",
                        "      103.72716,         0.00006\n",
                        "      105.21673,         0.00006\n",
                        "      105.69797,         0.00006\n",
                        "      106.25397,         0.00008\n",
                        "      107.75944,         0.00006\n",
                        "       95.32664,         0.00009\n",
                        "       95.43674,         0.00005\n",
                        "       96.71832,         0.00006\n",
                        "       97.81154,         0.00006\n",
                        "       99.52160,         0.00005\n",
                        "      103.23390,         0.00005\n",
                        "      117.81702,         0.00006\n",
                        "      127.07056,         0.00006\n",
                        "      129.26896,         0.00007\n",
                        "      141.80821,         0.00005\n",
                        "      133.25022,         0.00069\n",
                        "      129.97821,         0.00013\n",
                        "      129.79138,         0.00006\n",
                        "      121.12108,         0.00005\n",
                        "      111.81575,         0.00008\n",
                        "      112.95719,         0.00010\n",
                        "      114.45736,         0.00005\n"
                    ]
                }
            ],
            "source": [
                "#Change list length to test trends\n",
                "# Changes in list data to reduce computation time\n",
                "# First, create lists to store the results\n",
                "sizes = []          # To store list sizes\n",
                "popzero_times = []  # To store pop(0) times\n",
                "popend_times = []   # To store pop() times\n",
                "\n",
                "print(\"pop(0) pop()\")\n",
                "for i in range (1000000, 100000001,1000000):\n",
                "    x = list(range(i))\n",
                "    pt = popend.timeit (number=1000)\n",
                "    x = list(range(i))\n",
                "    pz = popzero.timeit(number=1000)\n",
                "    print(\"%15.5f, %15.5f\" %(pz, pt))\n",
                "    sizes.append(i)\n",
                "    popzero_times.append(pz)\n",
                "    popend_times.append(pt)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [],
            "source": [
                "import pandas as pd\n",
                "\n",
                "# Combine lists into DataFrames\n",
                "df = pd.DataFrame({\n",
                "    'size': sizes,\n",
                "    'popzero_time': popzero_times,\n",
                "    'popend_time': popend_times\n",
                "})\n",
                "\n",
                "# Save as CSV\n",
                "df.to_csv('timing_data.csv', index=False)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1IAAAIhCAYAAABE54vcAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB/jUlEQVR4nO3deXhU1f3H8c+QjYQ9CZBVUAoiQhFFVgOhCMomNeKGlUXrUjciLmitAlbhJ1UI4lbUAlZALUZq1QpoZRNUFqlbRVFACEmRNUAChMn5/XE7QyaZSWYmM5lJ8n49T57knrude3PE+eac8z02Y4wRAAAAAMBrDUJdAQAAAACobQikAAAAAMBHBFIAAAAA4CMCKQAAAADwEYEUAAAAAPiIQAoAAAAAfEQgBQAAAAA+IpACAAAAAB8RSAEAAACAjwikAATF/PnzZbPZnF+RkZFKS0vT+PHjlZeXF9B7nTx5UrfeequSk5MVERGh8847L6DXr6/WrFmjq666SqmpqYqOjlazZs3Up08fPf/88zp27Fioqxd0mZmZyszMDHU1ap1XXnlFLVu21JEjR1zKP/jgA/Xu3VtxcXFKTEzUuHHjtHfvXpdjPvzwQzVu3Djg/0bUZuXfZ0lJidq1a6ecnJzQVgyAbMYYE+pKAKh75s+fr/Hjx2vevHnq2LGjiouLtXr1ak2fPl0pKSn68ssv1ahRo4Dca/bs2crOztacOXN0wQUXqHHjxurSpUtArl1fTZ48WY8++qj69OmjG2+8Ue3atVNRUZHWrVunuXPnavTo0Zo1a1aoqxlU33zzjSSpU6dOIa5J7VFUVKQOHTooOztb9957r7N81apVuvjiizVs2DDdfvvt2rt3ryZNmqQWLVpo48aNiomJcR77q1/9Sunp6VqwYEEoHiGseHqfCxYs0N13363vv/9eCQkJIawhUM8ZAAiCefPmGUlmw4YNLuUPP/ywkWReffXVat/j2LFjxhhjfvvb35rY2NhqX6+soqKigF6vNnnjjTeMJHPjjTea0tLSCvsLCwvNsmXLQlCzmuFoV/Ddc889Zxo2bGgOHjzoUn7hhReaTp06mZKSEmfZxx9/bCSZ5557zuXYJUuWmIiICPPTTz/VRJXDmqf3eeLECRMfH28ef/zx0FQMgDHGGIb2AahRvXr1kiTt3LlTkmSM0XPPPafzzjtPsbGxatGihUaNGqUff/zR5bzMzEx17txZq1evVp8+fRQXF6cbbrhBNptNL730koqLi53DCOfPny9JOn78uB588EGdeeaZio6OVmpqqm6//XYdOnTI5dpt27bV8OHDlZubq27duqlhw4aaOnWqVq5cKZvNpkWLFmnSpElKTk5W48aNNWLECP33v//VkSNHdPPNNysxMVGJiYkaP368jh496nLtZ599Vv369VOrVq3UqFEjdenSRTNmzFBJSYnb59uwYYMyMjIUFxens846S//3f/+n0tJSl2MPHTqke+65R2eddZZiYmLUqlUrDR06VN9++63zmJMnT+qxxx5Tx44dFRMTo5YtW2r8+PH6+eefq/wdPfroo2rRooWefvpp2Wy2CvubNGmiwYMHO7d9fc/vvPOOunXrptjYWJ1zzjl65513JFm9mOecc44aNWqkHj16aOPGjS7njxs3To0bN9bXX3+tgQMHqlGjRmrZsqXuuOMOFRUVVeu9l29Xjn3lh/Y9//zz6tq1qxo3bqwmTZqoY8eO+v3vf+9yzFdffaWRI0eqRYsWatiwoc4777wKvSuOtrV48WI99NBDSklJUdOmTXXxxRdr69atHn4zVXM8z5o1a9SrVy/FxsYqNTVVDz/8sOx2u8uxBw4c0G233eYcunnWWWfpoYce0okTJ1yOs9lsuuOOO/TnP/9ZHTp0UExMjDp16qTXXnutwv2ff/55jRgxQs2bN3eW5eXlacOGDbr++usVGRnpLO/Tp486dOigt956y+UaI0aMUOPGjfXiiy9W+qw5OTmy2Wzatm1bhX2TJk1SdHS09u3bJ0n6/PPPNXz4cLVq1UoxMTFKSUnRsGHDtHv37krvEY7vU5Kio6N19dVXa+7cuTIMLAJCJ9SRHIC6yVOP1OzZs40kM3fuXGOMMTfddJOJiooy99xzj3n//ffNokWLTMeOHU3r1q1NQUGB87z+/fub+Ph4k56ebubMmWM++ugjs2rVKrN+/XozdOhQExsba9avX2/Wr19v9u7da0pLS80ll1xiIiMjzcMPP2yWL19unnzySdOoUSPTrVs3c/z4cee127RpY5KTk81ZZ51l/vKXv5iPPvrIfPbZZ+ajjz4ykkybNm3MuHHjzPvvv29eeOEF07hxYzNgwAAzaNAgc++995rly5ebJ554wkRERJg777zT5Xnvvvtu8/zzz5v333/f/Otf/zKzZs0yiYmJZvz48S7H9e/f3yQkJJj27dubF154waxYscLcdtttRpJZsGCB87jCwkJz7rnnmkaNGplHH33ULFu2zLz55ptmwoQJ5l//+pcxxhi73W4uvfRS06hRIzN16lSzYsUK89JLL5nU1FTTqVOnSnvb9uzZYySZq6++2qvfs6/vOS0tzXTu3NksXrzYvPfee6Znz54mKirKPPLII6Zv374mNzfXvPXWW6ZDhw6mdevWLnUdO3asiY6ONmeccYZ5/PHHzfLly82UKVNMZGSkGT58uN/v3V27cuzr37+/89jFixcbSebOO+80y5cvNx988IF54YUXzF133eU85ttvvzVNmjQx7dq1M6+88op59913zbXXXmskmSeeeMJ5nKNttW3b1lx33XXm3XffNYsXLzZnnHGGad++vTl16lSFYydPnlzl78PRjlJSUszTTz9tli1bZu666y4jydx+++3O44qLi80vf/lL06hRI/Pkk0+a5cuXm4cffthERkaaoUOHulxTkklPTzedOnUyixcvNm+//ba59NJLjSTzt7/9zXncrl273PYwvf/++0aSeffddyvUd9SoUSY5OblC+ZAhQ8z5559f6bP+/PPPJjo62jz00EMu5adOnTIpKSkmKyvLGGPM0aNHTUJCgunevbt54403zKpVq8zrr79ubr31VvPNN99Ueo9wfJ8Or7/+upFkvvjii0qfAUDwEEgBCApHIPXJJ5+YkpISc+TIEfPOO++Yli1bmiZNmpiCggKzfv16I8k89dRTLufu2rXLxMbGmvvvv99Z1r9/fyPJfPjhhxXuNXbsWNOoUSOXMseHtxkzZriUOz58OAI5Y6wP+BEREWbr1q0uxzo+wI4YMcKlPDs720hy+QBtjDG//vWvTXx8vMd3YrfbTUlJiXnllVdMRESEOXDgQIXn+/TTT13O6dSpk7nkkkuc248++qiRZFasWOHxPo4P/G+++aZL+YYNGyr9YGaMMZ988omRZB544AGPx5Tl63uOjY01u3fvdpZt2bLFSDLJyckuQ+qWLl1qJJm3337bWTZ27FgjycyePdvlXo8//riRZNauXeu2jt68d3ftqnwgdccdd5jmzZtX+j6uueYaExMTU2FY2pAhQ0xcXJw5dOiQMeZ02yr/IdsxrHL9+vXOspUrV5qIiAgzderUSu9d9nn+/ve/u5TfdNNNpkGDBmbnzp3GGGNeeOEFI8m88cYbLsc98cQTRpJZvny5s0ySiY2NdfnDxqlTp0zHjh3NL37xC2eZ43f+ySefuFxz4cKFFZ7J4eabbzbR0dEVyh966CHToEEDc/To0UqfNysry6SlpRm73e4se++994wk849//MMYY8zGjRuNJLN06dJKr+VOOL5Ph++//95IMs8//7zPzwUgMBjaByCoevXqpaioKDVp0kTDhw9XUlKS/vnPf6p169Z65513ZLPZ9Jvf/EanTp1yfiUlJalr165auXKly7VatGihX/3qV17d91//+pckazhYWVdeeaUaNWqkDz/80KX8l7/8pTp06OD2WsOHD3fZPueccyRJw4YNq1B+4MABl+F9n3/+uS677DIlJCQoIiJCUVFRGjNmjOx2u7777juX85OSktSjR48K9XIMg5Skf/7zn+rQoYMuvvhiT4+ud955R82bN9eIESNc3ut5552npKSkCu+1Onx9z+edd55SU1Od2453mZmZqbi4uArlZZ/d4brrrnPZHj16tCTpo48+cpb58t69bVc9evTQoUOHdO211+rvf/+7c9hYWf/61780cOBApaenu5SPGzdORUVFWr9+vUv5ZZdd5rL9y1/+UpLrc/fv31+nTp3SI488UmUdJWvoZfnrjh49WqWlpVq9erWzno0aNdKoUaMq1FNShd/bwIED1bp1a+d2RESErr76am3bts05PG7Pnj2SpFatWrmtl7thop7KW7VqpdLSUhUUFHh6TEnS+PHjtXv3bn3wwQfOsnnz5ikpKUlDhgyRJP3iF79QixYtNGnSJL3wwgvOJCLeCtf36SgnwyEQOgRSAILqlVde0YYNG/T5559rz549+uKLL9S3b19J0n//+18ZY9S6dWtFRUW5fH3yyScVPqgmJyd7fd/9+/crMjJSLVu2dCm32WxKSkrS/v37vb52fHy8y3Z0dHSl5cePH5ck/fTTT8rIyFBeXp5mz56tNWvWaMOGDXr22WclScXFxS7nu8u+FRMT43Lczz//rLS0NI91laz3eujQIUVHR1d4rwUFBW4DAIczzjhDkrR9+/ZK7+Hg63v29106REZGVnhPSUlJzrpIvr93b9vV9ddfr7/85S/auXOnrrjiCrVq1Uo9e/bUihUrnMfs37/f7fVSUlJc6uhQ/lkc2evK19EXZT+gO5R/R/v371dSUlKFIKZVq1aKjIysUE/H+ZVd01Hnhg0buhzneMby15SseUXlf/dlr1HVexgyZIiSk5M1b948SdLBgwf19ttva8yYMYqIiJAkNWvWTKtWrdJ5552n3//+9zr33HOVkpKiyZMnV5gz5064vU8Hb98RgOCJrPoQAPDfOeeco+7du7vdl5iYKJvNpjVr1rikP3YoX+bpL9ruJCQk6NSpU/r5559dPuQbY1RQUKALL7zQ72t7a+nSpTp27Jhyc3PVpk0bZ/mWLVv8vmbLli2rnCCfmJiohIQEvf/++273N2nSxOO5ycnJ6tKli5YvX66ioiKXXiJ3fH3P1XXq1Cnt37/fJQBx9Fo4ynx977787sePH6/x48fr2LFjWr16tSZPnqzhw4fru+++U5s2bZSQkKD8/PwK5zl6FxITE72+l7/++9//Vigr/44SEhL06aefyhjj8vx79+7VqVOnKtTTXc9Q+Ws6zjlw4IBLMNm5c2dJ0pdffqmhQ4e6XOPLL7907i/rwIEDLtf0JCIiQtdff72efvppHTp0SIsWLdKJEyc0fvx4l+O6dOmi1157TcYYffHFF5o/f74effRRxcbG6oEHHqj0HuH2Ph28fUcAgoceKQAhM3z4cBljlJeXp+7du1f4qs5aUAMHDpQkvfrqqy7lb775po4dO+bcH0yOD1RlA0JjTJXZyCozZMgQfffdd84hde4MHz5c+/fvl91ud/tezz777Erv8fDDD+vgwYO666673GYEO3r0qJYvXy4pNO954cKFLtuLFi2SJGeGvWC89/IaNWqkIUOG6KGHHtLJkyf19ddfS7Lex7/+9S9n4OTwyiuvKC4uzpm1MpiOHDmit99+26Vs0aJFatCggfr16+es59GjR7V06dIK9XTsL+vDDz90CSjsdrtef/11tWvXztlD2rFjR0nSDz/84HJuamqqevTooVdffdUl090nn3yirVu3Kisrq8Iz/Pjjj0pISHDbG1Te+PHjdfz4cS1evFjz589X7969nXUpz2azqWvXrpo1a5aaN2+uzZs3V3n9cHufDo7MpqxzBoQOPVIAQqZv3766+eabNX78eG3cuFH9+vVTo0aNlJ+fr7Vr16pLly763e9+59e1Bw0apEsuuUSTJk1SYWGh+vbtqy+++EKTJ09Wt27ddP311wf4adzXITo6Wtdee63uv/9+HT9+XM8//7wOHjzo9zWzs7P1+uuva+TIkXrggQfUo0cPFRcXa9WqVRo+fLgGDBiga665RgsXLtTQoUM1YcIE9ejRQ1FRUdq9e7c++ugjjRw5UpdffrnHe1x55ZV6+OGH9cc//lHffvuty4K8n376qf785z/r6quv1uDBg2v8PUdHR+upp57S0aNHdeGFF2rdunV67LHHNGTIEF100UWSgvPeJemmm25SbGys+vbtq+TkZBUUFGj69Olq1qyZs+dt8uTJeueddzRgwAA98sgjio+P18KFC/Xuu+9qxowZatasmc/3XbVqlQYOHKhHHnnEq3lSCQkJ+t3vfqeffvpJHTp00HvvvacXX3xRv/vd75xDN8eMGaNnn31WY8eO1Y4dO9SlSxetXbtW06ZN09ChQyvMwUtMTNSvfvUrPfzww2rUqJGee+45ffvtty4pu3v27KnY2Fh98sknFeYUPfHEExo0aJCuvPJK3Xbbbdq7d68eeOABde7cuULvkWQFWf379/eqt7Bjx47q3bu3pk+frl27dmnu3Lku+9955x0999xz+vWvf62zzjpLxhjl5ubq0KFDGjRoUK18n453FBER4QzmAIRAiJJcAKjjPKU/d+cvf/mL6dmzp2nUqJGJjY017dq1M2PGjDEbN250HtO/f39z7rnnuj3fXdY+Y6yUxJMmTTJt2rQxUVFRJjk52fzud7+rsLhlmzZtzLBhwyqc78isVjYlcWXPNnnyZCPJ/Pzzz86yf/zjH6Zr166mYcOGJjU11dx3333mn//8p5FkPvrooyqfb+zYsaZNmzYuZQcPHjQTJkwwZ5xxhomKijKtWrUyw4YNM99++63zmJKSEvPkk0867924cWPTsWNHc8stt5jvv/++wn3cWbVqlTM9dVRUlGnatKnp3bu3+dOf/mQKCwudx1X3PatcKmljjNm+fbuRZP70pz+5vItGjRqZL774wmRmZprY2FgTHx9vfve731XI7lbd9+7YVzZr34IFC8yAAQNM69atTXR0tElJSTFXXXVVhfTTX375pRkxYoRp1qyZiY6ONl27djXz5s1zOcZT23I8d9njfU1/fu6555qVK1ea7t27m5iYGJOcnGx+//vfuyyGa4wx+/fvN7feeqtJTk42kZGRpk2bNubBBx90SVlvzOnfz3PPPWfatWtnoqKiTMeOHc3ChQsr3P/66683nTp1clu35cuXm169epmGDRua+Ph4M2bMGPPf//63wnHbtm1zm3WyMnPnznVmwzt8+LDLvm+//dZce+21pl27diY2NtY0a9bM9OjRw8yfP7/K64bz+8zIyKiQURRAzbIZw0puAIDwN27cOC1ZsqTCosc4LTMzU/v27dNXX30VsGvabDbdfvvteuaZZ6o8duPGjbrwwgv1ySefqGfPnn7d7+GHH9Yrr7yiH374wWUB31AI1/f5ww8/qH379lq2bJlXvWoAgoM5UgAAICC6d++uq666Sn/84x/9Ov/QoUN69tlnNW3atJAHUeHA0/t87LHHNHDgQIIoIMQIpAAAQMA89dRTuvDCC3XkyBGfz92+fbsefPBB59pgqPg+T506pXbt2jnT+QMIHYb2AQAAAICP6JECAAAAAB8RSAEAAACAjwikAAAAAMBHpMSRVFpaqj179qhJkyZeLf4HAAAAoG4yxujIkSNKSUlRgwae+50IpCTt2bNH6enpoa4GAAAAgDCxa9cupaWledxPICWpSZMmkqyX1bRp06Dfr6SkRMuXL9fgwYMVFRUV9PuhbqDdwF+0HfiDdgN/0G7gr3BqO4WFhUpPT3fGCJ4QSEnO4XxNmzatsUAqLi5OTZs2DXlDQe1Bu4G/aDvwB+0G/qDdwF/h2HaqmvJDsgkAAAAA8BGBFAAAAAD4iEAKAAAAAHzEHCkvGWN06tQp2e32al+rpKREkZGROn78eECuV1dFREQoMjKSlPQAAAAIOwRSXjh58qTy8/NVVFQUkOsZY5SUlKRdu3YRJFQhLi5OycnJio6ODnVVAAAAACcCqSqUlpZq+/btioiIUEpKiqKjo6sd/JSWluro0aNq3LhxpYt81WfGGJ08eVI///yztm/frvbt2/OuAAAAEDYIpKpw8uRJlZaWKj09XXFxcQG5ZmlpqU6ePKmGDRsSHFQiNjZWUVFR2rlzp/N9AQAAAOGAT/FeIuAJDd47AAAAwhGfUgEAAADARwRSAAAAAOAjAikERL9+/bRo0SKvj9+7d69atmypvLy8INYKAAAACA4CKVTbO++8o4KCAl1zzTXOshMnTujOO+9UYmKiGjVqpMsuu0y7d+927m/VqpWuv/56TZ48ORRVBgAAAKqFQKqm2O3SypXS4sXW9zq0EO/TTz+t8ePHuySGyM7O1ltvvaXXXntNa9eu1dGjRzV8+HCXBYjHjx+vhQsX6uDBg6GoNgAAAOA3AqmakJsrtW0rDRggjR6tBgMHqukvf2mVB1FmZqbuuOMO3XHHHWrevLkSEhL0hz/8QcYYSdLBgwc1ZswYtWjRQnFxcRoyZIi+//575/nz589X8+bNtXTpUnXo0EENGzbUoEGDtGvXLucx+/bt0wcffKDLLrvMWXb48GG9/PLLeuqpp3TxxRerW7duevXVV/Xll1/qgw8+cB7XpUsXJSUl6a233grqewAAAKiT6vAf6msDAqlgy82VRo2SygxrkyRbfr5sV10V9GBqwYIFioyM1Keffqqnn35as2bN0ksvvSRJGjdunDZu3Ki3335b69evlzFGQ4cOVUlJifP8oqIiPf7441qwYIE+/vhjFRYWugzhW7t2reLi4nTOOec4yzZt2qSSkhINHjzYWZaSkqLOnTtr3bp1LvXr0aOH1qxZE6zHBwAAqJvK/aFeAwZY20H+bInTWJA3mOx2acIE6X89QGXZjJGx2aTsbGnkSCkiIihVSE9P16xZs2Sz2XT22Wfryy+/1KxZs5SZmam3335bH3/8sfr06SNJWrhwodLT07V06VJdeeWVkqSSkhI988wz6tmzpyQrMDvnnHP02WefqUePHtqxY4dat27tMqyvoKBA0dHRatGihUtdWrdurYKCApey1NRUff7550F5dgAAgDrJ8Yf68p8x8/Ks8iVLpKys0NStHqFHKpjWrKnQE1WWzRhp1y7ruCDp1auXbDabc7t37976/vvv9c033ygyMtIZIElSQkKCzj77bP3nP/9xlkVGRqp79+7O7Y4dO6p58+bOY4qLi9WwYUOv6mKMcamLJMXGxqqoqMivZwMAAKh3KvlDvbMsO5thfjWAQCqY8vMDe1wNcBfslN8uW5aYmFghWURSUpJOnjxZoXzv3r1q3bq1S9mBAwfUsmXLQFQdAACg7qviD/WqgT/Uw0IgFUzJyYE9zg+ffPJJhe327durU6dOOnXqlD799FPnvv379+u7775zme906tQpbdy40bm9detWHTp0SB07dpQkdevWTQUFBS5B0wUXXKCoqCitWLHCWZafn6+vvvrKOYzQ4auvvlK3bt0C87AAAAB1XS38Q31dFdJAavXq1RoxYoRSUlJks9m0dOlSj8fecsststlsysnJcSmvar2ikMrIkNLSJDc9OpKsOVLp6dZxQbJr1y5N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DO0DAAB1h7+L1zp6nebOZb4SAK8QSAEAgLrD28VrW7aUfv759HZamjV0z9HrxHwlAFXwKZAyxmjVqlVas2aNduzYoaKiIrVs2VLdunXTxRdfrPT09GDVEwAAoGreLnK7bZu0bh29TgD85tUcqeLiYk2bNk3p6ekaMmSI3n33XR06dEgRERHatm2bJk+erDPPPFNDhw7VJ598Euw6AwAAuOftIrfR0Vav07XXBi8TH4A6zaseqQ4dOqhnz5564YUXdMkllygqKqrCMTt37tSiRYt09dVX6w9/+INuuummgFcWAACgSo5FbsuvI1V++B4AVINXgdQ///lPde7cudJj2rRpowcffFD33HOPdu7cGZDKAQAA+IVFbgEEmVeBVFVBVFnR0dFq37693xUCAAAICBa5BRBEPq8j9f7772vt2rXO7WeffVbnnXeeRo8erYMHDwa0cgAAAAAQjnwOpO677z4VFhZKkr788kvdc889Gjp0qH788UdNnDgx4BUEAAAAgHDj8zpS27dvV6dOnSRJb775poYPH65p06Zp8+bNGjp0aMArCAAAAADhxuceqejoaBUVFUmSPvjgAw0ePFiSFB8f7+ypAgAAAIC6zOceqYsuukgTJ05U37599dlnn+n111+XJH333XdKS0sLeAUBAAAAINz43CP1zDPPKDIyUkuWLNHzzz+v1NRUSVaK9EsvvTTgFQQAAACAcONzj9QZZ5yhd955p0L5rFmzAlIhAAAAAAh3XgVSvsx9atq0qd+VAQAAAIDawKtAqnnz5rLZbF5d0G63V6tCAAAAABDuvAqkPvroI+fPO3bs0AMPPKBx48apd+/ekqT169drwYIFmj59enBqCQAAAABhxKtAqn///s6fH330Uc2cOVPXXnuts+yyyy5Tly5dNHfuXI0dOzbwtQQAAACAMOJz1r7169ere/fuFcq7d++uzz77LCCVAgAAAIBw5nMglZ6erhdeeKFC+Z///Gelp6cHpFIAAAAAEM58Tn8+a9YsXXHFFVq2bJl69eolSfrkk0/0ww8/6M033wx4BQEAAAAg3PjcIzV06FB9//33uuyyy3TgwAHt379fI0eO1HfffaehQ4cGo44AAAAAEFZ8DqQkKS0tTdOmTVNubq7eeustPf7440EZ1nfq1Cn94Q9/0JlnnqnY2FidddZZevTRR1VaWuo8xhijKVOm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AAAAUJMIpAAAAADARwRSAAAAAOAjAikAAAAA8BGBFAAAAAD4iEAKAAAAAHxEIAUAAAAAPiKQAgAAAAAfEUgBAAAAgI8IpAAAAADARwRSAAAAAOAjAikAAAAA8BGBFAAAAAD4KDLUFQgHxhhJUmFhYY3cr6SkREVFRSosLFRUVFSN3BO1H+0G/qLtwB+0G/iDdgN/hVPbccQEjhjBEwIpSUeOHJEkpaenh7gmAAAAAMLBkSNH1KxZM4/7baaqUKseKC0t1Z49e9SkSRPZbLag36+wsFDp6enatWuXmjZtGvT7oW6g3cBftB34g3YDf9Bu4K9wajvGGB05ckQpKSlq0MDzTCh6pCQ1aNBAaWlpNX7fpk2bhryhoPah3cBftB34g3YDf9Bu4K9waTuV9UQ5kGwCAAAAAHxEIAUAAAAAPiKQCoGYmBhNnjxZMTExoa4KahHaDfxF24E/aDfwB+0G/qqNbYdkEwAAAADgI3qkAAAAAMBHBFIAAAAA4CMCKQAAAADwEYEUAAAAAPiIQCpInnvuOZ155plq2LChLrjgAq1Zs6bS41etWqULLrhADRs21FlnnaUXXnihhmqKcOJLu8nNzdWgQYPUsmVLNW3aVL1799ayZctqsLYIF77+e+Pw8ccfKzIyUuedd15wK4iw5WvbOXHihB566CG1adNGMTExateunf7yl7/UUG0RLnxtNwsXLlTXrl0VFxen5ORkjR8/Xvv376+h2iIcrF69WiNGjFBKSopsNpuWLl1a5Tm14bMxgVQQvP7668rOztZDDz2kzz//XBkZGRoyZIh++uknt8dv375dQ4cOVUZGhj7//HP9/ve/11133aU333yzhmuOUPK13axevVqDBg3Se++9p02bNmnAgAEaMWKEPv/88xquOULJ13bjcPjwYY0ZM0YDBw6soZoi3PjTdq666ip9+OGHevnll7V161YtXrxYHTt2rMFaI9R8bTdr167VmDFjdOONN+rrr7/W3/72N23YsEG//e1va7jmCKVjx46pa9eueuaZZ7w6vtZ8NjYIuB49ephbb73Vpaxjx47mgQcecHv8/fffbzp27OhSdsstt5hevXoFrY4IP762G3c6depkpk6dGuiqIYz5226uvvpq84c//MFMnjzZdO3aNYg1RLjyte3885//NM2aNTP79++vieohTPnabv70pz+Zs846y6Xs6aefNmlpaUGrI8KbJPPWW29Vekxt+WxMj1SAnTx5Ups2bdLgwYNdygcPHqx169a5PWf9+vUVjr/kkku0ceNGlZSUBK2uCB/+tJvySktLdeTIEcXHxwejighD/rabefPm6YcfftDkyZODXUWEKX/azttvv63u3btrxowZSk1NVYcOHXTvvfequLi4JqqMMOBPu+nTp492796t9957T8YY/fe//9WSJUs0bNiwmqgyaqna8tk4MtQVqGv27dsnu92u1q1bu5S3bt1aBQUFbs8pKChwe/ypU6e0b98+JScnB62+CA/+tJvynnrqKR07dkxXXXVVMKqIMORPu/n+++/1wAMPaM2aNYqM5H8B9ZU/befHH3/U2rVr1bBhQ7311lvat2+fbrvtNh04cIB5UvWEP+2mT58+Wrhwoa6++modP35cp06d0mWXXaY5c+bURJVRS9WWz8b0SAWJzWZz2TbGVCir6nh35ajbfG03DosXL9aUKVP0+uuvq1WrVsGqHsKUt+3Gbrdr9OjRmjp1qjp06FBT1UMY8+XfnNLSUtlsNi1cuFA9evTQ0KFDNXPmTM2fP59eqXrGl3bzzTff6K677tIjjzyiTZs26f3339f27dt166231kRVUYvVhs/G/DkywBITExUREVHhLzN79+6tEFk7JCUluT0+MjJSCQkJQasrwoc/7cbh9ddf14033qi//e1vuvjii4NZTYQZX9vNkSNHtHHjRn3++ee64447JFkfjo0xioyM1PLly/WrX/2qRuqO0PLn35zk5GSlpqaqWbNmzrJzzjlHxhjt3r1b7du3D2qdEXr+tJvp06erb9++uu+++yRJv/zlL9WoUSNlZGToscceC5ueBYSX2vLZmB6pAIuOjtYFF1ygFStWuJSvWLFCffr0cXtO7969Kxy/fPlyde/eXVFRUUGrK8KHP+1Gsnqixo0bp0WLFjHevB7ytd00bdpUX375pbZs2eL8uvXWW3X22Wdry5Yt6tmzZ01VHSHmz785ffv21Z49e3T06FFn2XfffacGDRooLS0tqPVFePCn3RQVFalBA9ePmxEREZJO9zAA5dWaz8YhSnJRp7322msmKirKvPzyy+abb74x2dnZplGjRmbHjh3GGGMeeOABc/311zuP//HHH01cXJy5++67zTfffGNefvllExUVZZYsWRKqR0AI+NpuFi1aZCIj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",
                        "text/plain": [
                            "<Figure size 1000x600 with 1 Axes>"
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": [
                "import matplotlib.pyplot as plt\n",
                "\n",
                "# Create a new figure with specific size\n",
                "plt.figure(figsize=(10, 6))\n",
                "\n",
                "# Scatter plot\n",
                "plt.scatter(sizes, popzero_times, color='red', label='pop(0)', marker='o') # 红色点表示 pop(0)\n",
                "plt.scatter(sizes, popend_times, color='blue', label='pop()', marker='o') # 蓝色点表示 pop()\n",
                "\n",
                "# Add titles and tags\n",
                "plt.title('Performance Comparison: pop(0) vs pop()')\n",
                "plt.xlabel('List Size')\n",
                "plt.ylabel('Time (seconds)')\n",
                "\n",
                "# Add legends and grids\n",
                "plt.legend()\n",
                "plt.grid(True)\n",
                "\n",
                "# Display graphics\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# <a id='toc6_'></a>[206 Performance of Python data types (below)](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc6_1_'></a>[1. dict data type](#toc0_)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "❖ Dictionaries are different from lists in that data items are found based on keycode (key), whereas lists are based on position (index)\n",
                "\n",
                "❖ The most commonly used fetch get and assignment set have a performance of O(1)\n",
                "\n",
                "❖ Another important operation contains(in) is to determine whether a certain keycode (key) exists in the dictionary, this also performs O(1)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## <a id='toc6_2_'></a>[Comparison of in operation timing between list and dict](#toc0_)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "10000      0.131      0.001\n",
                        "30000      0.347      0.001\n",
                        "50000      0.465      0.001\n",
                        "70000      0.579      0.001\n",
                        "90000      0.780      0.001\n",
                        "110000      1.107      0.001\n",
                        "130000      1.861      0.001\n",
                        "150000      1.571      0.001\n",
                        "170000      1.732      0.001\n",
                        "190000      1.950      0.001\n",
                        "210000      2.135      0.001\n",
                        "230000      2.405      0.001\n",
                        "250000      2.464      0.001\n",
                        "270000      3.357      0.001\n",
                        "290000      2.955      0.001\n",
                        "310000      3.197      0.001\n",
                        "330000      3.129      0.001\n",
                        "350000      3.665      0.002\n",
                        "370000      3.787      0.001\n",
                        "390000      4.587      0.001\n",
                        "410000      3.728      0.001\n",
                        "430000      5.087      0.003\n",
                        "450000      5.767      0.002\n",
                        "470000      7.082      0.002\n",
                        "490000      5.310      0.001\n",
                        "510000      5.517      0.002\n",
                        "530000      5.284      0.003\n",
                        "550000      6.694      0.002\n",
                        "570000      9.586      0.007\n",
                        "590000      9.511      0.003\n",
                        "610000      7.523      0.002\n",
                        "630000      7.742      0.001\n",
                        "650000      9.626      0.002\n",
                        "670000      9.930      0.002\n",
                        "690000      8.472      0.001\n",
                        "710000      8.433      0.002\n",
                        "730000     10.969      0.002\n",
                        "750000     10.130      0.001\n",
                        "770000      8.347      0.001\n",
                        "790000      9.417      0.001\n",
                        "810000      9.423      0.002\n",
                        "830000     11.470      0.001\n",
                        "850000      9.336      0.001\n",
                        "870000      8.276      0.003\n",
                        "890000      8.335      0.001\n",
                        "910000      7.700      0.003\n",
                        "930000      7.685      0.001\n",
                        "950000      8.008      0.001\n",
                        "970000      8.398      0.002\n",
                        "990000      9.298      0.001\n"
                    ]
                }
            ],
            "source": [
                "# Import timeit module for performance testing and random module for generating random numbers\n",
                "import timeit\n",
                "import random\n",
                "\n",
                "\n",
                "sizes = []\n",
                "dtime_rec = []\n",
                "ltime_rec = []\n",
                "\n",
                "# From 10,000 to 1,000,000 in steps of 20,000 to test performance at different data sizes\n",
                "for i in range(10000, 1000001, 20000):\n",
                "    # Create Timer object to test \"random.randrange(i) in x\"\n",
                "    t = timeit.Timer(\"random.randrange(%d) in x\" % i, \n",
                "                     #%d: is a format placeholder in a string, indicating that a decimal integer is to be inserted here. There can be no space between the percent sign and d\n",
                "                     #% i: is the actual formatting operation, replacing the value of variable i with the value of %d. It's fine to remove the space between the operator and i, but it's recommended to have a space on both sides\n",
                "                     #The two are bound by the % operator, resulting in a dynamic string.\n",
                "                     # Here random.randrange(i) is used to generate a random integer between 0 and i, and then check if this number exists in the list x\n",
                "                    \"from __main__ import random,x\")# In timeit's execution environment, which is isolated by default, it does not automatically inherit imports from the main module. Therefore, from __main__ import random,x explicitly introduces random and x from the main module into the test environment, allowing test statements to correctly recognize these variables and modules.\n",
                "    \n",
                "    # Create a list of length i (elements are ordered integers from 0 to i-1)\n",
                "    x = list(range(i))\n",
                "    # Test 1000 \"in\" operations on a list and return the total time in seconds.\n",
                "    lst_time = t.timeit(number=1000)\n",
                "    \n",
                "    # Create a dictionary of size i (keys 0 through i-1, values all None)\n",
                "    x = {j:None for j in range(i)}\n",
                "    # Test 1000 \"in\" operations on a dictionary and return the total time taken.\n",
                "    d_time = t.timeit(number=1000)# Note that the query is: whether the key exists in the dictionary, not the value\n",
                "    \n",
                "    # Formatted output: data size | list elapsed time | dictionary elapsed time (keep 3 decimals)\n",
                "    print(\"%d %10.3f %10.3f\" % (i, lst_time, d_time))\n",
                "    \n",
                "    # Record the current data size i and corresponding elapsed time data\n",
                "    sizes.append(i)\n",
                "    dtime_rec.append(d_time)\n",
                "    ltime_rec.append(lst_time)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [],
            "source": [
                "import pandas as pd\n",
                "\n",
                "# Combine lists into DataFrames\n",
                "df = pd.DataFrame({\n",
                "    'size': sizes,\n",
                "    'dtime_rec': dtime_rec,\n",
                "    'ltime_rec': ltime_rec\n",
                "})\n",
                "\n",
                "# Save as CSV\n",
                "df.to_csv('timing_rec.csv', index=False)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "",
                        "text/plain": [
                            "<Figure size 1000x600 with 1 Axes>"
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": [
                "import matplotlib.pyplot as plt\n",
                "\n",
                "# Create a new figure with specific size\n",
                "plt.figure(figsize=(10, 6))\n",
                "\n",
                "# Scatter plot\n",
                "plt.scatter(sizes, dtime_rec, color='red', label='dict', marker='o') # 红色点表字典\n",
                "plt.scatter(sizes, ltime_rec, color='blue', label='list', marker='o') # 蓝色点表示列表\n",
                "\n",
                "# Add titles and tags\n",
                "plt.title('Performance Comparison: dict vs list')\n",
                "plt.xlabel('Size')\n",
                "plt.ylabel('Time (seconds)')\n",
                "\n",
                "# Add legends and grids\n",
                "plt.legend()\n",
                "plt.grid(True)\n",
                "\n",
                "# Display graphics\n",
                "plt.show()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "❖ Python's official algorithmic complexity website:\n",
                "https://wiki.python.org/moin/TimeComplexity"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# <a id='toc7_'></a>[207 How to do Catechism OJ](#toc0_)\n",
                "\n",
                "* :: OJ, known as online judge.\n",
                "\n",
                "* :: Elements of a program: input-process-output (IPO), i.e., **input-process-output**\n",
                "\n",
                "* :: Answer the OJ notes:\n",
                "  1. Input data and answers are character strings\n",
                "  2. The output must be consistent with the answer, including invisible spaces\n",
                "\n",
                "* :: Steps to answer OJ\n",
                "  1. Read the question first\n",
                "  2. Read the sample\n",
                "  3. local writing program, debugging, testing. input without a prompt. You can add self-programming samples to check\n",
                "  4. Copy the code in its entirety and submit it for online assessment\n",
                "\n",
                "When reading a question, in addition to determining the meaning of the question, you should also check the format of the input and output!\n",
                "\n",
                "* :: Input format processing\n",
                "  1. Multiple lines of input: one ```input()`` per line, converted as required\n",
                "  2. If one integer per line ```a = int(input())```\n",
                "  3. Multiple variables entered in a single line are read in with ```input().split()'`` and broken down into **lists**. Also a list of strings\n",
                "  4. Multiple integers in a row ``list(map(int,input().split()))``\n",
                "\n",
                "* :: Output format processing\n",
                "  1. In the case of a single integer, print the output: ```print``''\n",
                "  2. In the case of floating-point numbers, see that the number of decimal places to be retained is specified by ```print('%.3f'%(a/b))``''.\n",
                "  3. Pay special attention to the position and number of spaces, which are not visible to the naked eye at the end of the line."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# <a id='toc8_'></a>[OJ Actual](#toc0_)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "collapsed": true
            },
            "outputs": [],
            "source": [
                "# 1. given two integers, output their quotient\n",
                "a = int(input())\n",
                "b = int(input())\n",
                "if b != 0:\n",
                "    print('%.3f'%(a/b))# retain three decimal places\n",
                "else:\n",
                "    print('NA')"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {
                "collapsed": true
            },
            "outputs": [],
            "source": [
                "# 2. Given rows and columns, print a solid rectangle made up of * signs\n",
                "\n",
                "m,n = map(int,input().split())#attention mapping\n",
                "for i in range(m):\n",
                "    print('*'*n)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# 3. Given a number of integers, find the smallest of these integers and output.\n",
                "a = list(map(int,input().split()))\n",
                "print(min(a))"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# <a id='toc9_'></a> [Supplementary material ---- Fast power algorithms](#toc0_)\n",
                "\n",
                "Core idea: exponential dichotomy\n",
                "\n",
                "**Key mechanisms**:\n",
                "The exponential computation is decomposed into smaller sub-problems by means of a **partitioning strategy** to avoid repetitive computations. It is specifically shown as:\n",
                "- **Recursive decomposition index**:\n",
                "  Decompose the power operation $x^n$ into:\n",
                "  \n",
                "  \n",
                "  \\begin{cases} \n",
                "  (x^2)^{n/2} & \\text{if } n \\text{ is even} \\\\\\\n",
                "  (x^2)^{\\lfloor n/2 \\rfloor} \\cdot x & \\text{if } n \\text{ 为奇数}\n",
                "  \\end{cases}\n",
                "  \n",
                "\n",
                "- **Avoiding double counting**:\n",
                "  Each recursion halves the exponential scale** $n \\rightarrow n/2$ instead of decreasing it linearly.\n",
                "  \n",
                "**Example flow** (using \\( n=8 \\) as an example).\n",
                "1. $ x^8 = (x^2)^4 $  \n",
                "2. $ (x^2)^4 = ((x^2)^2)^2 $  \n",
                "3. Only **3 multiplications** are required to complete the calculation (compared to 7 for the traditional method)."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Model code\n",
                "def pow(x, n):\n",
                "    if n == 0: \n",
                "        return 1 # Base case: any number to the 0th power of 1\n",
                "    elif n == 1: \n",
                "        return x # Base case: any number to the 1st power of itself\n",
                "    elif n % 2 == 0:\n",
                "        return pow(x*x, n//2) # Even numbers: convert to (x²)^(n/2)\n",
                "    else:\n",
                "        return pow(x*x, n//2) * x # Odd numbers: convert to x * (x²)^(n//2)"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.12.3"
        },
        "toc": {
            "base_numbering": 1,
            "nav_menu": {},
            "number_sections": true,
            "sideBar": true,
            "skip_h1_title": false,
            "title_cell": "Table of Contents",
            "title_sidebar": "Contents",
            "toc_cell": false,
            "toc_position": {},
            "toc_section_display": true,
            "toc_window_display": false
        }
    },
    "nbformat": 4,
    "nbformat_minor": 2
}